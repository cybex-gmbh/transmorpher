{
	"info": {
		"_postman_id": "42f0908d-10ad-4429-bb67-590ce6f11a9c",
		"name": "transmorpher server",
		"description": "This file describes the Transmorpher Server API.\n\n- It includes examples for failed calls as well, until they are all covered in tests.\n- Filter for \": OK\" to only see correct API calls.\n    \n\nConfiguration:\n\n- create a user on Transmorpher: `php artisan create:user postman postman@example.com http://amigor/transmorpher/notifications`\n- use the provided auth token and adjust the \"authToken\" variable\n- if you're using a domain different from \"transmorpher.test\", you will have to adjust the \"domain\" variable\n    \n\nIf you want to use the collection with the already defined files, you will have to go to `Settings > General > Allow reading files outside working directory`, and enable the option.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25831362"
	},
	"item": [
		{
			"name": "Image",
			"item": [
				{
					"name": "Reserve upload slot: No auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to obtain image upload token: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "postmanUnusedImage",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/image/reserveUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"image",
								"reserveUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reserve upload slot: Invalid identifier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to obtain image upload slot: Invalid identifier\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"identifier\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The identifier format is invalid.\",\r",
									"    \"errors\": {\r",
									"        \"identifier\": [\r",
									"            \"The identifier format is invalid.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "!allowed",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/image/reserveUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"image",
								"reserveUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reserve upload slot: OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Obtained image upload token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(jsonData.state).to.eql('initializing');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": 'initializing',\r",
									"    \"message\": \"Successfully created upload slot.\",\r",
									"    \"identifier\": \"postmanUnusedImage\",\r",
									"    \"upload_token\": \"6464b7e2f0928\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "postmanUnusedImage",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/image/reserveUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"image",
								"reserveUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: No auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to upload image: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"No query results for model [App\\\\Models\\\\UploadSlot] wrongImageToken\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								},
								{
									"key": "identifier",
									"value": "{{imageIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/wrongImageToken",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"wrongImageToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: No file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image upload rejected: File field is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"file\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The file field is required.\",\r",
									"    \"errors\": {\r",
									"        \"file\": [\r",
									"            \"The file field is required.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "{{imageIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: Wrong mime type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image upload rejected: File has wrong mime type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"file\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The file must be a file of type: jpg, png, gif, webp.\",\r",
									"    \"errors\": {\r",
									"        \"file\": [\r",
									"            \"The file must be a file of type: jpg, png, gif, webp.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/SystemApps/Microsoft.Windows.CloudExperienceHost_cw5n1h2txyewy/media/oobe-intro.mp4"
								},
								{
									"key": "identifier",
									"value": "{{imageIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: Slot expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image upload rejected: Upload slot expired\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"No query results for model [App\\\\Models\\\\UploadSlot] 668859273610d\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/image/reserveUploadSlot\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            \"mode\": \"application/json\",\r",
									"            \"raw\": JSON.stringify(\r",
									"                {\r",
									"                    'identifier': pm.collectionVariables.get(\"imageIdentifier\")\r",
									"                }\r",
									"            )\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        console.log(jsonData);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								},
								{
									"key": "identifier",
									"value": "{{imageIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: non-matching identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image upload rejected: File has wrong mime type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"identifier\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The provided identifier does not match the identifier of the reserved upload slot.\",\r",
									"    \"errors\": {\r",
									"        \"identifier\": [\r",
									"            \"The provided identifier does not match the identifier of the reserved upload slot.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								},
								{
									"key": "identifier",
									"value": "thisDoesNotMatch",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: missing identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image upload rejected: File has wrong mime type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"identifier\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The identifier field is required.\",\r",
									"    \"errors\": {\r",
									"        \"identifier\": [\r",
									"            \"The identifier field is required.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: invalid identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image upload rejected: File has wrong mime type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"identifier\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The identifier format is invalid. (and 1 more error)\",\r",
									"    \"errors\": {\r",
									"        \"identifier\": [\r",
									"            \"The identifier format is invalid.\",\r",
									"            \"The provided identifier does not match the identifier of the reserved upload slot.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								},
								{
									"key": "identifier",
									"value": "--thisIdentifierIsInvalid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image uploaded\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('success');\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"    pm.collectionVariables.set('currentImageVersion', jsonData.version);\r",
									"    console.log('set currentImageVersion to: ' + pm.collectionVariables.get('currentImageVersion'));\r",
									"});\r",
									"/* {\r",
									"    \"state\": 'success',\r",
									"    \"message\": \"Successfully uploaded new image version.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"    \"version\": 1,\r",
									"    \"public_path\": \"images/postman/postmanTestImage\",\r",
									"    \"upload_token\": \"6464a87163b5a\",\r",
									"    \"hash\": \"db36a07353dd308635fb54a5443f7277\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								},
								{
									"key": "identifier",
									"value": "{{imageIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{imageUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{imageUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download as AAA: invalid format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieving derivative failed: invalid format parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The provided value aaa for the FORMAT parameter is not valid.\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/f-aaa",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"f-aaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download as PNG: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received PNG image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/f-png",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"f-png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download as PNG, low quality: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received PNG image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/q-1+f-png",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"q-1+f-png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download as JPG, low quality: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received JPG image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/jpeg\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/q-1+f-jpg",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"q-1+f-jpg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download as WEBP, low quality: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received WEBP image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/webp\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/q-1+f-webp",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"q-1+f-webp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download (default): OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received default image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.contentInfo().mimeType).to.be.equal(\"image\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download width abc: invalid width",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieving derivative failed: invalid width parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The provided value abc for the WIDTH parameter is not valid.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/w-abc",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"w-abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download width 100: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received PNG image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/w-100",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"w-100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download quality 123: invalid quality",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieving derivative failed: invalid quality parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The provided value 123 for the QUALITY parameter is not valid.\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/q-123",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"q-123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download quality 90: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received PNG image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/q-90",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"q-90"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download height xyz: invalid height",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieving derivative failed: invalid height parameter\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The provided value xyz for the HEIGHT parameter is not valid.\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/h-xyz",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"h-xyz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download height 100: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received PNG image derivative\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/images/{{user}}/{{imageIdentifier}}/h-100",
							"host": [
								"{{domain}}"
							],
							"path": [
								"images",
								"{{user}}",
								"{{imageIdentifier}}",
								"h-100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download specific Version original: No auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not allowed to read original Image without auth token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/api/v1/image/{{imageIdentifier}}/version/{{currentImageVersion}}/original",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"image",
								"{{imageIdentifier}}",
								"version",
								"{{currentImageVersion}}",
								"original"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download specific Version original: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received original image\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.contentInfo().mimeType).to.be.equal(\"image\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/media/\" + pm.collectionVariables.get(\"imageIdentifier\") + \"/versions\",\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        var currentVersion = jsonData.currentVersion;\r",
									"        pm.collectionVariables.set(\"currentImageVersion\", currentVersion);\r",
									"        console.log('set currentImageVersion to: ' + pm.collectionVariables.get('currentImageVersion'));\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/api/v1/image/{{imageIdentifier}}/version/{{currentImageVersion}}/original",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"image",
								"{{imageIdentifier}}",
								"version",
								"{{currentImageVersion}}",
								"original"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download specific Version derivative: OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/media/\" + pm.collectionVariables.get(\"imageIdentifier\") + \"/versions\",\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        var currentVersion = jsonData.currentVersion;\r",
									"        pm.collectionVariables.set(\"currentImageVersion\", currentVersion);\r",
									"        console.log('set currentImageVersion to: ' + pm.collectionVariables.get('currentImageVersion'));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Received derivative for specific version\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.contentInfo().mimeType).to.be.equal(\"image\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/api/v1/image/{{imageIdentifier}}/version/{{currentImageVersion}}/derivative/q-1",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"image",
								"{{imageIdentifier}}",
								"version",
								"{{currentImageVersion}}",
								"derivative",
								"q-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Versions: No auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to retreive image versions: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/api/v1/media/{{imageIdentifier}}/versions",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{imageIdentifier}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Versions: OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image versions retrieved\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('success');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": 'success',\r",
									"    \"message\": \"Successfully retrieved version numbers.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"    \"currentVersion\": 3,\r",
									"    \"currentlyProcessedVersion\": 3,\r",
									"    \"versions\": {\r",
									"        \"1\": 1720201274,\r",
									"        \"2\": 1720205610,\r",
									"        \"3\": 1720208565\r",
									"    },\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/api/v1/media/{{imageIdentifier}}/versions",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{imageIdentifier}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore old Version: No auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to set image version: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/media/\" + pm.collectionVariables.get(\"imageIdentifier\") + \"/versions\",\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        var currentVersion = jsonData.currentVersion;\r",
									"        pm.collectionVariables.set(\"currentImageVersion\", currentVersion);\r",
									"        console.log('set currentImageVersion to: ' + pm.collectionVariables.get('currentImageVersion'));\r",
									"    }\r",
									");\r",
									"/* {\r",
									"    \"success\": true,\r",
									"    \"response\": \"Successfully retrieved version numbers.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"    \"currentVersion\": 2,\r",
									"    \"currentlyProcessedVersion\": null,\r",
									"    \"versions\": {\r",
									"        \"2\": 1684330530\r",
									"    },\r",
									"    \"client\": \"postman\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_token",
									"value": "abc123",
									"type": "text"
								},
								{
									"key": "_method",
									"value": "patch",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{imageIdentifier}}/version/{{currentImageVersion}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{imageIdentifier}}",
								"version",
								"{{currentImageVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore old Version: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image version set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('success');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": \"success\",\r",
									"    \"message\": \"Successfully set image version.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"    \"version\": 2,\r",
									"    \"public_path\": \"images/postman/postmanTestImage\",\r",
									"    \"upload_token\": \"66885feb496fe\",\r",
									"    \"hash\": \"021881ce82531c8a30d6db156e49635a\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/media/\" + pm.collectionVariables.get(\"imageIdentifier\") + \"/versions\",\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        var currentVersion = jsonData.currentVersion;\r",
									"        pm.collectionVariables.set(\"currentImageVersion\", currentVersion);\r",
									"        console.log('set currentImageVersion to: ' + pm.collectionVariables.get('currentImageVersion'));\r",
									"    }\r",
									");\r",
									"/* {\r",
									"    \"state\": \"success\",\r",
									"    \"message\": \"Successfully set image version.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"    \"version\": 7,\r",
									"    \"public_path\": \"images/postman/postmanTestImage\",\r",
									"    \"upload_token\": \"66885c772e464\",\r",
									"    \"hash\": \"78c1ca529ca4db228ae34780050f77f6\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "_method",
									"value": "patch",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{imageIdentifier}}/version/{{currentImageVersion}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{imageIdentifier}}",
								"version",
								"{{currentImageVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: No auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to delete image: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{imageIdentifier}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{imageIdentifier}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Image deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('deleted');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": 'deleted',\r",
									"    \"response\": \"Successfully deleted media.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"} */\r",
									"pm.test(\"Image not found after deletion\", function () {\r",
									"    pm.sendRequest(\r",
									"        {\r",
									"            url: \"http://transmorpher.test/api/media/\" + pm.collectionVariables.get(\"imageIdentifier\") + \"/versions\",\r",
									"            method: \"GET\",\r",
									"            header: {\r",
									"                \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"                \"Accept\": \"application/json\",\r",
									"                \"Content-Type\": \"application/json\"\r",
									"            }\r",
									"        }, function (err, response) {\r",
									"            var jsonData = response.json();\r",
									"            console.log(jsonData);\r",
									"            pm.expect(response.code).to.eql(404);\r",
									"        }\r",
									"    );\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"No query results for model [App\\\\Models\\\\Media].\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{imageIdentifier}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{imageIdentifier}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest(",
							"    {",
							"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/image/reserveUploadSlot\",",
							"        method: \"POST\",",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),",
							"            \"Accept\": \"application/json\",",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            \"mode\": \"application/json\",",
							"            \"raw\": JSON.stringify(",
							"                {",
							"                    'identifier': pm.collectionVariables.get(\"imageIdentifier\")",
							"                }",
							"            )",
							"        }",
							"    }, function (err, response) {",
							"        var jsonData = response.json();",
							"        console.log(jsonData);",
							"        pm.collectionVariables.set('imageUploadToken', jsonData.upload_token);",
							"        console.log('set imageUploadToken to: ' + pm.collectionVariables.get('imageUploadToken'));",
							"        console.log('-------------------------------------------')",
							"    }",
							");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Video",
			"item": [
				{
					"name": "Reserve upload slot: No auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to obtain video upload token: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "{{videoIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/video/reserveUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"video",
								"reserveUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reserve upload slot: Invalid identifier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to obtain video upload slot: Invalid identifier\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"identifier\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The identifier format is invalid.\",\r",
									"    \"errors\": {\r",
									"        \"identifier\": [\r",
									"            \"The identifier format is invalid.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "--not-allowed",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/video/reserveUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"video",
								"reserveUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reserve upload slot: OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Obtained video upload token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(jsonData.state).to.eql('initializing');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": 'initializing',\r",
									"    \"message\": \"Successfully created upload slot.\",\r",
									"    \"identifier\": \"postmanTestVideo\",\r",
									"    \"upload_token\": \"6464c1a67c372\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "identifier",
									"value": "{{videoIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/video/reserveUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"video",
								"reserveUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: No auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to upload video: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"No query results for model [App\\\\Models\\\\UploadSlot] invalidUploadSlot\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/SystemApps/Microsoft.Windows.CloudExperienceHost_cw5n1h2txyewy/media/oobe-intro.mp4"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/invalidUploadSlot",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"invalidUploadSlot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: No file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Video upload rejected: File field is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"file\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The file field is required. (and 1 more error)\",\r",
									"    \"errors\": {\r",
									"        \"file\": [\r",
									"            \"The file field is required.\"\r",
									"        ],\r",
									"        \"identifier\": [\r",
									"            \"The identifier field is required.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{videoUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{videoUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: Wrong mime type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Video upload rejected: File has wrong mime type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.json().errors).to.have.property(\"file\");\r",
									"    pm.expect(pm.response.code).to.equal(422);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"The file must be a file of type: video/x-msvideo, video/mpeg, video/ogg, video/webm, video/mp4.\",\r",
									"    \"errors\": {\r",
									"        \"file\": [\r",
									"            \"The file must be a file of type: video/x-msvideo, video/mpeg, video/ogg, video/webm, video/mp4.\"\r",
									"        ]\r",
									"    }\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/System32/FeatureToastBulldogImg.png"
								},
								{
									"key": "identifier",
									"value": "{{videoIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{videoUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{videoUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: Slot expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Video upload rejected: Upload slot expired\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"No query results for model [App\\\\Models\\\\UploadSlot] 6688761375576\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/video/reserveUploadSlot\",\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            \"mode\": \"application/json\",\r",
									"            \"raw\": JSON.stringify(\r",
									"                {\r",
									"                    'identifier': pm.collectionVariables.get(\"videoIdentifier\"),\r",
									"                    'callback_url': pm.collectionVariables.get(\"videoCallbackUrl\")\r",
									"                }\r",
									"            )\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        console.log(jsonData);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/SystemApps/Microsoft.Windows.CloudExperienceHost_cw5n1h2txyewy/media/oobe-intro.mp4"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{videoUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{videoUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Video uploaded\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('processing');\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"/* {\r",
									"    \"state\": \"processing\",\r",
									"    \"message\": \"Successfully uploaded new video version, transcoding job has been dispatched.\",\r",
									"    \"identifier\": \"postmanTestVideo\",\r",
									"    \"version\": 1,\r",
									"    \"public_path\": null,\r",
									"    \"upload_token\": \"668866635232e\",\r",
									"    \"hash\": null\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Windows/SystemApps/Microsoft.Windows.CloudExperienceHost_cw5n1h2txyewy/media/oobe-intro.mp4"
								},
								{
									"key": "identifier",
									"value": "{{videoIdentifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/upload/{{videoUploadToken}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"upload",
								"{{videoUploadToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Version set: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Video version set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('processing');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": \"processing\",\r",
									"    \"message\": \"Successfully set video version, transcoding job has been dispatched.\",\r",
									"    \"identifier\": \"postmanTestVideo\",\r",
									"    \"version\": 5,\r",
									"    \"public_path\": null,\r",
									"    \"upload_token\": \"668876687f4d6\",\r",
									"    \"hash\": null\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\r",
									"    {\r",
									"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/media/\" + pm.collectionVariables.get(\"videoIdentifier\") + \"/versions\",\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"            \"Accept\": \"application/json\",\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        var jsonData = response.json();\r",
									"        var currentVersion = jsonData.currentVersion;\r",
									"        pm.collectionVariables.set(\"currentVideoVersion\", currentVersion);\r",
									"        console.log('set currentVideoVersion to: ' + pm.collectionVariables.get('currentVideoVersion'));\r",
									"    }\r",
									");\r",
									"/* {\r",
									"    \"success\": true,\r",
									"    \"response\": \"Successfully retrieved version numbers.\",\r",
									"    \"identifier\": \"postmanTestImage\",\r",
									"    \"currentVersion\": 2,\r",
									"    \"currentlyProcessedVersion\": null,\r",
									"    \"versions\": {\r",
									"        \"2\": 1684330530\r",
									"    },\r",
									"    \"client\": \"postman\"\r",
									"} */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "_method",
									"value": "patch",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{videoIdentifier}}/version/{{currentVideoVersion}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{videoIdentifier}}",
								"version",
								"{{currentVideoVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: No auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unable to delete video: no auth\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"Unauthenticated.\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{videoIdentifier}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{videoIdentifier}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete: OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Video deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql('deleted');\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"/* {\r",
									"    \"state\": 'deleted',\r",
									"    \"response\": \"Successfully deleted media.\",\r",
									"    \"identifier\": \"postmanTestVideo\",\r",
									"} */\r",
									"pm.test(\"Video not found after deletion\", function () {\r",
									"    pm.sendRequest(\r",
									"        {\r",
									"            url: \"http://transmorpher.test/api/media/\" + pm.collectionVariables.get(\"videoIdentifier\") + \"/versions\",\r",
									"            method: \"GET\",\r",
									"            header: {\r",
									"                \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),\r",
									"                \"Accept\": \"application/json\",\r",
									"                \"Content-Type\": \"application/json\"\r",
									"            }\r",
									"        }, function (err, response) {\r",
									"            var jsonData = response.json();\r",
									"            console.log(jsonData);\r",
									"            pm.expect(response.code).to.eql(404);\r",
									"        }\r",
									"    );\r",
									"});\r",
									"/* {\r",
									"    \"message\": \"No query results for model [App\\\\Models\\\\Media].\"\r",
									"} */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{domain}}/api/v1/media/{{videoIdentifier}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"media",
								"{{videoIdentifier}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest(",
							"    {",
							"        url: pm.collectionVariables.replaceIn(\"{{domain}}\") + \"/api/v1/video/reserveUploadSlot\",",
							"        method: \"POST\",",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"authToken\"),",
							"            \"Accept\": \"application/json\",",
							"            \"Content-Type\": \"application/json\"",
							"        },",
							"        body: {",
							"            \"mode\": \"application/json\",",
							"            \"raw\": JSON.stringify(",
							"                {",
							"                    'identifier': pm.collectionVariables.get(\"videoIdentifier\"),",
							"                    'callback_url': pm.collectionVariables.get(\"videoCallbackUrl\")",
							"                }",
							"            )",
							"        }",
							"    }, function (err, response) {",
							"        var jsonData = response.json();",
							"        console.log(jsonData);",
							"        pm.collectionVariables.set('videoUploadToken', jsonData.upload_token);",
							"        console.log('set videoUploadToken to: ' + pm.collectionVariables.get('videoUploadToken'));",
							"        console.log('-------------------------------------------')",
							"    }",
							");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get public key: OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Received public key\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{domain}}/api/v1/publickey",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"v1",
						"publickey"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.clear();"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": "thisIsAnExamplePleaseEnterTheCorrectTokenForUser",
			"type": "string"
		},
		{
			"key": "domain",
			"value": "transmorpher.test",
			"type": "string"
		},
		{
			"key": "----------------------------",
			"value": "",
			"type": "string"
		},
		{
			"key": "user",
			"value": "postman",
			"type": "string"
		},
		{
			"key": "imageUploadToken",
			"value": "foo",
			"type": "string"
		},
		{
			"key": "imageIdentifier",
			"value": "postmanTestImage",
			"type": "string"
		},
		{
			"key": "videoUploadToken",
			"value": "foo",
			"type": "string"
		},
		{
			"key": "videoIdentifier",
			"value": "postmanTestVideo",
			"type": "string"
		},
		{
			"key": "currentImageVersion",
			"value": "0",
			"type": "string"
		},
		{
			"key": "currentVideoVersion",
			"value": "0",
			"type": "string"
		}
	]
}